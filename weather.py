from pyrogram import Client, filters
import requests
from datetime import datetime, timedelta

with open("Yuki.bot", "r") as file:
    lines = file.readlines()
    prefix_userbot = lines[2].strip().split('=')[1]

cinfo = f"‚òÄ`{prefix_userbot}weather`"
ccomand = " –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ. –ü—Ä–∏–º–µ—Ä: `weather –ú–æ—Å–∫–≤–∞`"


def get_api_key():
    try:
        with open("apis.bot", "r") as file:
            lines = file.readlines()
            for line in lines:
                if line.startswith("weather_key="):
                    return line.split("=", 1)[1].strip()
        return None
    except FileNotFoundError:
        return None


API_KEY = get_api_key()

weather_translation = {
    "—è—Å–Ω–æ": ("—è—Å–Ω–æ–µ –Ω–µ–±–æ", "‚òÄÔ∏è"),
    "–Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": ("–º–∞–ª–æ–æ–±–ª–∞—á–Ω–æ", "üå§"),
    "–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏": ("–æ–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏", "‚õÖ"),
    "–ø–∞—Å–º—É—Ä–Ω–æ": ("–ø–∞—Å–º—É—Ä–Ω–æ", "‚òÅÔ∏è"),
    "–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å": ("–Ω–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å", "üåß"),
    "–¥–æ–∂–¥—å": ("–¥–æ–∂–¥—å", "üåß"),
    "–≥—Ä–æ–∑–∞": ("–≥—Ä–æ–∑–∞", "‚õà"),
    "—Å–Ω–µ–≥": ("—Å–Ω–µ–≥", "‚ùÑÔ∏è"),
    "—Ç—É–º–∞–Ω": ("—Ç—É–º–∞–Ω", "üå´"),
    "–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å": ("–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å", "üå§"),
}


def register_module(app: Client):
    @app.on_message(filters.command("weather_set_key", prefixes=prefix_userbot))
    async def set_key(_, message):
        global API_KEY
        new_key = message.text.split(" ", maxsplit=1)[1]
        with open("apis.bot", "a") as file:
            file.write(f"weather_key={new_key}\n")
        API_KEY = new_key
        await message.delete()
        await message.reply_text("**‚úÖAPI –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!**")

    @app.on_message(filters.command("weather", prefixes=prefix_userbot))
    async def weather(_, message):
        if not API_KEY:
            await message.reply_text("**‚ùåAPI –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π `.weather_set_key <key>`.**")
            return
        try:
            town = message.text.split(" ", maxsplit=1)[1]
            response = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={town}&appid={API_KEY}&units=metric&lang=ru")
            data = response.json()
            if response.status_code == 200:
                town = data['name']
                temperature = data['main']['temp']
                weather_description = data['weather'][0]['description']
                timezone_offset = data['timezone']
                weather_rus, emoji = weather_translation.get(weather_description, (weather_description, "‚ùì"))
                if emoji == "‚ùì":
                    weather_rus = weather_description
                time_weather = (datetime.utcnow() + timedelta(seconds=timezone_offset)).strftime('%H:%M')
                reply_text = (f"**üèô–ì–æ—Ä–æ–¥:** {town}\n"
                              f"**üå°–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** {temperature}¬∞C\n"
                              f"**{emoji}–ü–æ–≥–æ–¥–∞:** {weather_rus}\n"
                              f"**‚åõ–í—Ä–µ–º—è: {time_weather}**")
            else:
                reply_text = "**‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ.**"
        except IndexError:
            reply_text = "**‚ùå–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: `weather –ú–æ—Å–∫–≤–∞`**"
        except Exception as e:
            reply_text = f"**‚ùå–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}**"
        await message.delete()
        await message.reply_text(reply_text)


print("–ú–æ–¥—É–ª—å weather –∑–∞–≥—Ä—É–∂–µ–Ω!")
